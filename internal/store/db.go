// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package store

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createBlogStmt, err = db.PrepareContext(ctx, createBlog); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBlog: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getProfileByUserIdStmt, err = db.PrepareContext(ctx, getProfileByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetProfileByUserId: %w", err)
	}
	if q.getTotalUserCountStmt, err = db.PrepareContext(ctx, getTotalUserCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetTotalUserCount: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByEmailOrUsernameStmt, err = db.PrepareContext(ctx, getUserByEmailOrUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmailOrUsername: %w", err)
	}
	if q.listBlogsStmt, err = db.PrepareContext(ctx, listBlogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListBlogs: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createBlogStmt != nil {
		if cerr := q.createBlogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBlogStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getProfileByUserIdStmt != nil {
		if cerr := q.getProfileByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProfileByUserIdStmt: %w", cerr)
		}
	}
	if q.getTotalUserCountStmt != nil {
		if cerr := q.getTotalUserCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTotalUserCountStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailOrUsernameStmt != nil {
		if cerr := q.getUserByEmailOrUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailOrUsernameStmt: %w", cerr)
		}
	}
	if q.listBlogsStmt != nil {
		if cerr := q.listBlogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBlogsStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	createBlogStmt               *sql.Stmt
	createUserStmt               *sql.Stmt
	getProfileByUserIdStmt       *sql.Stmt
	getTotalUserCountStmt        *sql.Stmt
	getUserStmt                  *sql.Stmt
	getUserByEmailOrUsernameStmt *sql.Stmt
	listBlogsStmt                *sql.Stmt
	listUsersStmt                *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		createBlogStmt:               q.createBlogStmt,
		createUserStmt:               q.createUserStmt,
		getProfileByUserIdStmt:       q.getProfileByUserIdStmt,
		getTotalUserCountStmt:        q.getTotalUserCountStmt,
		getUserStmt:                  q.getUserStmt,
		getUserByEmailOrUsernameStmt: q.getUserByEmailOrUsernameStmt,
		listBlogsStmt:                q.listBlogsStmt,
		listUsersStmt:                q.listUsersStmt,
	}
}
