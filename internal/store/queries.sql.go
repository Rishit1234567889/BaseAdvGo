// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package store

import (
	"context"
	"database/sql"
)

const createBlog = `-- name: CreateBlog :one
INSERT INTO blogs(title,content,user_id,created,updated)
VALUES ($1,$2,$3,$4,$5)
    RETURNING id,title,content,user_id,created,updated
`

type CreateBlogParams struct {
	Title   string       `json:"title"`
	Content string       `json:"content"`
	UserID  int32        `json:"user_id"`
	Created sql.NullTime `json:"created"`
	Updated sql.NullTime `json:"updated"`
}

type CreateBlogRow struct {
	ID      int32        `json:"id"`
	Title   string       `json:"title"`
	Content string       `json:"content"`
	UserID  int32        `json:"user_id"`
	Created sql.NullTime `json:"created"`
	Updated sql.NullTime `json:"updated"`
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (CreateBlogRow, error) {
	row := q.queryRow(ctx, q.createBlogStmt, createBlog,
		arg.Title,
		arg.Content,
		arg.UserID,
		arg.Created,
		arg.Updated,
	)
	var i CreateBlogRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one

INSERT INTO users(username ,email,password)
VALUES ($1,$2,$3)
    RETURNING id,username,email,created,updated
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreateUserRow struct {
	ID       int32        `json:"id"`
	Username string       `json:"username"`
	Email    string       `json:"email"`
	Created  sql.NullTime `json:"created"`
	Updated  sql.NullTime `json:"updated"`
}

// 2.3 after queries
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Username, arg.Email, arg.Password)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getProfileByUserId = `-- name: GetProfileByUserId :one
SELECT id, username, email, created, updated
FROM users
WHERE id = $1
`

type GetProfileByUserIdRow struct {
	ID       int32        `json:"id"`
	Username string       `json:"username"`
	Email    string       `json:"email"`
	Created  sql.NullTime `json:"created"`
	Updated  sql.NullTime `json:"updated"`
}

func (q *Queries) GetProfileByUserId(ctx context.Context, id int32) (GetProfileByUserIdRow, error) {
	row := q.queryRow(ctx, q.getProfileByUserIdStmt, getProfileByUserId, id)
	var i GetProfileByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getTotalUserCount = `-- name: GetTotalUserCount :one
SELECT COUNT(*) AS total_users
FROM users
`

func (q *Queries) GetTotalUserCount(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.getTotalUserCountStmt, getTotalUserCount)
	var total_users int64
	err := row.Scan(&total_users)
	return total_users, err
}

const getUser = `-- name: GetUser :one
SELECT id ,username,email,created,updated
FROM users
WHERE id= $1
`

type GetUserRow struct {
	ID       int32        `json:"id"`
	Username string       `json:"username"`
	Email    string       `json:"email"`
	Created  sql.NullTime `json:"created"`
	Updated  sql.NullTime `json:"updated"`
}

func (q *Queries) GetUser(ctx context.Context, id int32) (GetUserRow, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getUserByEmailOrUsername = `-- name: GetUserByEmailOrUsername :one
SELECT id, username, email,password, created, updated
FROM users
WHERE email = $1 OR username = $2
LIMIT 1
`

type GetUserByEmailOrUsernameParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) GetUserByEmailOrUsername(ctx context.Context, arg GetUserByEmailOrUsernameParams) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailOrUsernameStmt, getUserByEmailOrUsername, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listBlogs = `-- name: ListBlogs :many
SELECT id ,title,content,user_id,created,updated
FROM blogs
ORDER BY id
`

type ListBlogsRow struct {
	ID      int32        `json:"id"`
	Title   string       `json:"title"`
	Content string       `json:"content"`
	UserID  int32        `json:"user_id"`
	Created sql.NullTime `json:"created"`
	Updated sql.NullTime `json:"updated"`
}

func (q *Queries) ListBlogs(ctx context.Context) ([]ListBlogsRow, error) {
	rows, err := q.query(ctx, q.listBlogsStmt, listBlogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListBlogsRow{}
	for rows.Next() {
		var i ListBlogsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id ,username,email,created,updated
FROM users
ORDER BY id
`

type ListUsersRow struct {
	ID       int32        `json:"id"`
	Username string       `json:"username"`
	Email    string       `json:"email"`
	Created  sql.NullTime `json:"created"`
	Updated  sql.NullTime `json:"updated"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
